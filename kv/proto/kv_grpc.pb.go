// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: kv/proto/kv.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvClient is the client API for Kv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*CreateSetResponse, error)
	CreateSortedSet(ctx context.Context, in *CreateSortedSetRequest, opts ...grpc.CallOption) (*CreateSortedSetResponse, error)
	AppendList(ctx context.Context, in *AppendListRequest, opts ...grpc.CallOption) (*AppendListResponse, error)
	AppendSet(ctx context.Context, in *AppendSetRequest, opts ...grpc.CallOption) (*AppendSetResponse, error)
	AppendSortedSet(ctx context.Context, in *AppendSortedSetRequest, opts ...grpc.CallOption) (*AppendSortedSetResponse, error)
	PopList(ctx context.Context, in *PopListRequest, opts ...grpc.CallOption) (*PopListResponse, error)
	RemoveList(ctx context.Context, in *RemoveListRequest, opts ...grpc.CallOption) (*RemoveListResponse, error)
	RemoveSet(ctx context.Context, in *RemoveSetRequest, opts ...grpc.CallOption) (*RemoveSetResponse, error)
	RemoveSortedSet(ctx context.Context, in *RemoveSortedSetRequest, opts ...grpc.CallOption) (*RemoveSortedSetResponse, error)
	CheckList(ctx context.Context, in *CheckListRequest, opts ...grpc.CallOption) (*CheckListResponse, error)
	CheckSet(ctx context.Context, in *CheckSetRequest, opts ...grpc.CallOption) (*CheckSetResponse, error)
	CheckSortedSet(ctx context.Context, in *CheckSortedSetRequest, opts ...grpc.CallOption) (*CheckSortedSetResponse, error)
	SetList(ctx context.Context, in *SetListRequest, opts ...grpc.CallOption) (*SetListResponse, error)
	SetSet(ctx context.Context, in *SetSetRequest, opts ...grpc.CallOption) (*SetSetResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error)
	MultiSet(ctx context.Context, in *MultiSetRequest, opts ...grpc.CallOption) (*MultiSetResponse, error)
	CAS(ctx context.Context, in *CASRequest, opts ...grpc.CallOption) (*CASResponse, error)
	GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error)
	GetShardContents(ctx context.Context, in *GetShardContentsRequest, opts ...grpc.CallOption) (Kv_GetShardContentsClient, error)
}

type kvClient struct {
	cc grpc.ClientConnInterface
}

func NewKvClient(cc grpc.ClientConnInterface) KvClient {
	return &kvClient{cc}
}

func (c *kvClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CreateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*CreateSetResponse, error) {
	out := new(CreateSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CreateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CreateSortedSet(ctx context.Context, in *CreateSortedSetRequest, opts ...grpc.CallOption) (*CreateSortedSetResponse, error) {
	out := new(CreateSortedSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CreateSortedSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) AppendList(ctx context.Context, in *AppendListRequest, opts ...grpc.CallOption) (*AppendListResponse, error) {
	out := new(AppendListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/AppendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) AppendSet(ctx context.Context, in *AppendSetRequest, opts ...grpc.CallOption) (*AppendSetResponse, error) {
	out := new(AppendSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/AppendSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) AppendSortedSet(ctx context.Context, in *AppendSortedSetRequest, opts ...grpc.CallOption) (*AppendSortedSetResponse, error) {
	out := new(AppendSortedSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/AppendSortedSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) PopList(ctx context.Context, in *PopListRequest, opts ...grpc.CallOption) (*PopListResponse, error) {
	out := new(PopListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/PopList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) RemoveList(ctx context.Context, in *RemoveListRequest, opts ...grpc.CallOption) (*RemoveListResponse, error) {
	out := new(RemoveListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/RemoveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) RemoveSet(ctx context.Context, in *RemoveSetRequest, opts ...grpc.CallOption) (*RemoveSetResponse, error) {
	out := new(RemoveSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/RemoveSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) RemoveSortedSet(ctx context.Context, in *RemoveSortedSetRequest, opts ...grpc.CallOption) (*RemoveSortedSetResponse, error) {
	out := new(RemoveSortedSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/RemoveSortedSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CheckList(ctx context.Context, in *CheckListRequest, opts ...grpc.CallOption) (*CheckListResponse, error) {
	out := new(CheckListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CheckList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CheckSet(ctx context.Context, in *CheckSetRequest, opts ...grpc.CallOption) (*CheckSetResponse, error) {
	out := new(CheckSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CheckSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CheckSortedSet(ctx context.Context, in *CheckSortedSetRequest, opts ...grpc.CallOption) (*CheckSortedSetResponse, error) {
	out := new(CheckSortedSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CheckSortedSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) SetList(ctx context.Context, in *SetListRequest, opts ...grpc.CallOption) (*SetListResponse, error) {
	out := new(SetListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/SetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) SetSet(ctx context.Context, in *SetSetRequest, opts ...grpc.CallOption) (*SetSetResponse, error) {
	out := new(SetSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/SetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error) {
	out := new(GetSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/GetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) MultiSet(ctx context.Context, in *MultiSetRequest, opts ...grpc.CallOption) (*MultiSetResponse, error) {
	out := new(MultiSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/MultiSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CAS(ctx context.Context, in *CASRequest, opts ...grpc.CallOption) (*CASResponse, error) {
	out := new(CASResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CAS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error) {
	out := new(GetRangeResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/GetRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetShardContents(ctx context.Context, in *GetShardContentsRequest, opts ...grpc.CallOption) (Kv_GetShardContentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Kv_ServiceDesc.Streams[0], "/kv.Kv/GetShardContents", opts...)
	if err != nil {
		return nil, err
	}
	x := &kvGetShardContentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kv_GetShardContentsClient interface {
	Recv() (*GetShardContentsResponse, error)
	grpc.ClientStream
}

type kvGetShardContentsClient struct {
	grpc.ClientStream
}

func (x *kvGetShardContentsClient) Recv() (*GetShardContentsResponse, error) {
	m := new(GetShardContentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KvServer is the server API for Kv service.
// All implementations must embed UnimplementedKvServer
// for forward compatibility
type KvServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	CreateSet(context.Context, *CreateSetRequest) (*CreateSetResponse, error)
	CreateSortedSet(context.Context, *CreateSortedSetRequest) (*CreateSortedSetResponse, error)
	AppendList(context.Context, *AppendListRequest) (*AppendListResponse, error)
	AppendSet(context.Context, *AppendSetRequest) (*AppendSetResponse, error)
	AppendSortedSet(context.Context, *AppendSortedSetRequest) (*AppendSortedSetResponse, error)
	PopList(context.Context, *PopListRequest) (*PopListResponse, error)
	RemoveList(context.Context, *RemoveListRequest) (*RemoveListResponse, error)
	RemoveSet(context.Context, *RemoveSetRequest) (*RemoveSetResponse, error)
	RemoveSortedSet(context.Context, *RemoveSortedSetRequest) (*RemoveSortedSetResponse, error)
	CheckList(context.Context, *CheckListRequest) (*CheckListResponse, error)
	CheckSet(context.Context, *CheckSetRequest) (*CheckSetResponse, error)
	CheckSortedSet(context.Context, *CheckSortedSetRequest) (*CheckSortedSetResponse, error)
	SetList(context.Context, *SetListRequest) (*SetListResponse, error)
	SetSet(context.Context, *SetSetRequest) (*SetSetResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error)
	MultiSet(context.Context, *MultiSetRequest) (*MultiSetResponse, error)
	CAS(context.Context, *CASRequest) (*CASResponse, error)
	GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error)
	GetShardContents(*GetShardContentsRequest, Kv_GetShardContentsServer) error
	mustEmbedUnimplementedKvServer()
}

// UnimplementedKvServer must be embedded to have forward compatible implementations.
type UnimplementedKvServer struct {
}

func (UnimplementedKvServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKvServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKvServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKvServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedKvServer) CreateSet(context.Context, *CreateSetRequest) (*CreateSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSet not implemented")
}
func (UnimplementedKvServer) CreateSortedSet(context.Context, *CreateSortedSetRequest) (*CreateSortedSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSortedSet not implemented")
}
func (UnimplementedKvServer) AppendList(context.Context, *AppendListRequest) (*AppendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendList not implemented")
}
func (UnimplementedKvServer) AppendSet(context.Context, *AppendSetRequest) (*AppendSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendSet not implemented")
}
func (UnimplementedKvServer) AppendSortedSet(context.Context, *AppendSortedSetRequest) (*AppendSortedSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendSortedSet not implemented")
}
func (UnimplementedKvServer) PopList(context.Context, *PopListRequest) (*PopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopList not implemented")
}
func (UnimplementedKvServer) RemoveList(context.Context, *RemoveListRequest) (*RemoveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveList not implemented")
}
func (UnimplementedKvServer) RemoveSet(context.Context, *RemoveSetRequest) (*RemoveSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSet not implemented")
}
func (UnimplementedKvServer) RemoveSortedSet(context.Context, *RemoveSortedSetRequest) (*RemoveSortedSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSortedSet not implemented")
}
func (UnimplementedKvServer) CheckList(context.Context, *CheckListRequest) (*CheckListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckList not implemented")
}
func (UnimplementedKvServer) CheckSet(context.Context, *CheckSetRequest) (*CheckSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSet not implemented")
}
func (UnimplementedKvServer) CheckSortedSet(context.Context, *CheckSortedSetRequest) (*CheckSortedSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSortedSet not implemented")
}
func (UnimplementedKvServer) SetList(context.Context, *SetListRequest) (*SetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetList not implemented")
}
func (UnimplementedKvServer) SetSet(context.Context, *SetSetRequest) (*SetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSet not implemented")
}
func (UnimplementedKvServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedKvServer) GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (UnimplementedKvServer) MultiSet(context.Context, *MultiSetRequest) (*MultiSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiSet not implemented")
}
func (UnimplementedKvServer) CAS(context.Context, *CASRequest) (*CASResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAS not implemented")
}
func (UnimplementedKvServer) GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (UnimplementedKvServer) GetShardContents(*GetShardContentsRequest, Kv_GetShardContentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetShardContents not implemented")
}
func (UnimplementedKvServer) mustEmbedUnimplementedKvServer() {}

// UnsafeKvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvServer will
// result in compilation errors.
type UnsafeKvServer interface {
	mustEmbedUnimplementedKvServer()
}

func RegisterKvServer(s grpc.ServiceRegistrar, srv KvServer) {
	s.RegisterService(&Kv_ServiceDesc, srv)
}

func _Kv_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CreateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CreateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CreateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CreateSet(ctx, req.(*CreateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CreateSortedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSortedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CreateSortedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CreateSortedSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CreateSortedSet(ctx, req.(*CreateSortedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_AppendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).AppendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/AppendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).AppendList(ctx, req.(*AppendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_AppendSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).AppendSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/AppendSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).AppendSet(ctx, req.(*AppendSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_AppendSortedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendSortedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).AppendSortedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/AppendSortedSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).AppendSortedSet(ctx, req.(*AppendSortedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_PopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).PopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/PopList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).PopList(ctx, req.(*PopListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_RemoveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).RemoveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/RemoveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).RemoveList(ctx, req.(*RemoveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_RemoveSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).RemoveSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/RemoveSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).RemoveSet(ctx, req.(*RemoveSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_RemoveSortedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSortedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).RemoveSortedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/RemoveSortedSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).RemoveSortedSet(ctx, req.(*RemoveSortedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CheckList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CheckList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CheckList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CheckList(ctx, req.(*CheckListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CheckSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CheckSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CheckSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CheckSet(ctx, req.(*CheckSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CheckSortedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSortedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CheckSortedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CheckSortedSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CheckSortedSet(ctx, req.(*CheckSortedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_SetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).SetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/SetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).SetList(ctx, req.(*SetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_SetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).SetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/SetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).SetSet(ctx, req.(*SetSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/GetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).GetSet(ctx, req.(*GetSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_MultiSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).MultiSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/MultiSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).MultiSet(ctx, req.(*MultiSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CAS(ctx, req.(*CASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/GetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).GetRange(ctx, req.(*GetRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetShardContents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetShardContentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KvServer).GetShardContents(m, &kvGetShardContentsServer{stream})
}

type Kv_GetShardContentsServer interface {
	Send(*GetShardContentsResponse) error
	grpc.ServerStream
}

type kvGetShardContentsServer struct {
	grpc.ServerStream
}

func (x *kvGetShardContentsServer) Send(m *GetShardContentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Kv_ServiceDesc is the grpc.ServiceDesc for Kv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv.Kv",
	HandlerType: (*KvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Kv_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Kv_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Kv_Delete_Handler,
		},
		{
			MethodName: "CreateList",
			Handler:    _Kv_CreateList_Handler,
		},
		{
			MethodName: "CreateSet",
			Handler:    _Kv_CreateSet_Handler,
		},
		{
			MethodName: "CreateSortedSet",
			Handler:    _Kv_CreateSortedSet_Handler,
		},
		{
			MethodName: "AppendList",
			Handler:    _Kv_AppendList_Handler,
		},
		{
			MethodName: "AppendSet",
			Handler:    _Kv_AppendSet_Handler,
		},
		{
			MethodName: "AppendSortedSet",
			Handler:    _Kv_AppendSortedSet_Handler,
		},
		{
			MethodName: "PopList",
			Handler:    _Kv_PopList_Handler,
		},
		{
			MethodName: "RemoveList",
			Handler:    _Kv_RemoveList_Handler,
		},
		{
			MethodName: "RemoveSet",
			Handler:    _Kv_RemoveSet_Handler,
		},
		{
			MethodName: "RemoveSortedSet",
			Handler:    _Kv_RemoveSortedSet_Handler,
		},
		{
			MethodName: "CheckList",
			Handler:    _Kv_CheckList_Handler,
		},
		{
			MethodName: "CheckSet",
			Handler:    _Kv_CheckSet_Handler,
		},
		{
			MethodName: "CheckSortedSet",
			Handler:    _Kv_CheckSortedSet_Handler,
		},
		{
			MethodName: "SetList",
			Handler:    _Kv_SetList_Handler,
		},
		{
			MethodName: "SetSet",
			Handler:    _Kv_SetSet_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _Kv_GetList_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _Kv_GetSet_Handler,
		},
		{
			MethodName: "MultiSet",
			Handler:    _Kv_MultiSet_Handler,
		},
		{
			MethodName: "CAS",
			Handler:    _Kv_CAS_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _Kv_GetRange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetShardContents",
			Handler:       _Kv_GetShardContents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kv/proto/kv.proto",
}
